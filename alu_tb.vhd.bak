library ieee;
use ieee.std_logic_1164.all;

entity alu_tb is
end alu_tb;

architecture sim of alu_tb is
    -- Constants for opcode values
    constant ADD_UNSIGNED_OP : std_logic_vector(5 downto 0) := X"21";
    constant SUB_UNSIGNED_OP : std_logic_vector(5 downto 0) := X"23";
    constant MULT_SIGNED_OP : std_logic_vector(5 downto 0) := X"18";
    -- Add constants for other opcodes...

    -- Signals for testbench
    signal input1_tb, input2_tb, shiftAmount_tb, OpCode_tb : std_logic_vector(31 downto 0);
    signal output_tb, outputHI_tb : std_logic_vector(31 downto 0);
    signal branchTaken_tb : std_logic;

    -- Component instantiation
    component alu
        port (
            input1 : in std_logic_vector(31 downto 0);
            input2 : in std_logic_vector(31 downto 0);
            shiftAmount : in std_logic_vector(4 downto 0);
            OpCode : in std_logic_vector(5 downto 0);
            output : out std_logic_vector(31 downto 0);
            outputHI : out std_logic_vector(31 downto 0);
            branchTaken : out std_logic
        );
    end component;

begin
    -- ALU instantiation
    uut: alu
        port map (
            input1 => input1_tb,
            input2 => input2_tb,
            shiftAmount => shiftAmount_tb,
            OpCode => OpCode_tb,
            output => output_tb,
            outputHI => outputHI_tb,
            branchTaken => branchTaken_tb
        );

    -- Testbench process
    process
    begin
        -- Initialize signals and inputs
        input1_tb <= (others => '0');
        input2_tb <= (others => '0');
        shiftAmount_tb <= (others => '0');
        OpCode_tb <= (others => '0');

        -- Test case 1: ADD operation
        input1_tb <= X"00000001";
        input2_tb <= X"00000002";
        OpCode_tb <= ADD_UNSIGNED_OP;

        wait for 10 ns;

        -- Test case 2: SUB operation
        input1_tb <= X"00000003";
        input2_tb <= X"00000001";
        OpCode_tb <= SUB_UNSIGNED_OP;

        wait for 10 ns;

        -- Add more test cases for other operations...

        -- End the simulation after all test cases
        wait;
    end process;

end sim;
